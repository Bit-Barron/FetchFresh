services:
  fetchfresh:
    container_name: fetchfresh
    restart: always
    build:
      context: ./
      dockerfile: Dockerfile
      target: prod
      args:
        - SECRET=${SECRET}
        - DATABASE_URL=${DATABASE_URL}
        - NEXT_PUBLIC_URL=${NEXT_PUBLIC_URL}
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
        - NEXT_PUBLIC_SMTP_HOST=${NEXT_PUBLIC_SMTP_HOST}
        - NEXT_PUBLIC_SMTP_USER=${NEXT_PUBLIC_SMTP_USER}
        - NEXT_PUBLIC_SMTP_PASS=${NEXT_PUBLIC_SMTP_PASS}
    environment:
      - SECRET=${SECRET}
      - DATABASE_URL=${DATABASE_URL}
      - NEXT_PUBLIC_URL=${NEXT_PUBLIC_URL}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_SMTP_HOST=${NEXT_PUBLIC_SMTP_HOST}
      - NEXT_PUBLIC_SMTP_USER=${NEXT_PUBLIC_SMTP_USER}
      - NEXT_PUBLIC_SMTP_PASS=${NEXT_PUBLIC_SMTP_PASS}
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fetchfresh.rule=Host(`fetchfresh.de`)"
      - "traefik.http.routers.fetchfresh.entrypoints=websecure"
      - "traefik.http.routers.fetchfresh.tls.certresolver=letsencrypt"
      - "traefik.http.services.fetchfresh.loadbalancer.server.port=3000"

networks:
  proxy:
    external: false
    name: proxy
